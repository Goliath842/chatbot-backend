import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import axios from 'axios';

dotenv.config();

const app = express();
app.use(express.json());
app.use(cors());

const PORT = process.env.PORT || 3001;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const GEMINI_API_URL = process.env.GEMINI_API_URL;
const BOT_TOKEN = process.env.BOT_TOKEN;

app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
    if (!GEMINI_API_KEY) {
        console.error('GEMINI_API_KEY is not set in the environment variables.');
    } else {
        console.log('GEMINI_API_KEY is set.');
    }
});

app.post('/api/webhook', async (req, res) => {
  const { message } = req.body;
  if (!message?.text) return res.sendStatus(200);

  const chatId = message.chat.id;
  const menuText = message.text;

  console.log('Tin nh·∫Øn nh·∫≠n:', menuText);

  await axios.post(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
    chat_id: chatId,
    text: `üçΩ ƒê√£ nh·∫≠n menu: "${menuText}". ƒêang x·ª≠ l√Ω...`
  });

  res.sendStatus(200);
});


app.post('/api/chat', async (req, res) => {

    const userMessage = req.body.message;

    try {
        const geminiResponse = await axios.post(
            `${GEMINI_API_URL}:generateContent?key=${GEMINI_API_KEY}`,
        {
            contents:[
                {
                    role: 'user',
                    parts: [
                        {
                            text: 'B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát v√† kh√¥ng tr·∫£ l·ªùi qu√° d√†i. N·∫øu c√¢u h·ªèi kh√¥ng r√µ r√†ng, h√£y y√™u c·∫ßu ng∆∞·ªùi d√πng l√†m r√µ.',
                        }
                    ]
                },
                {
                    role: 'user',
                    parts: [
                        {
                            text: userMessage
                        }
                    ]
                }
            ]
        },
        {
            headers: {
                'Content-Type': 'application/json',
            }
        });

        const reply = geminiResponse.data.candidates?.[0]?.content?.parts?.[0]?.text || 'Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ Gemini.';
        res.json({ reply });
    } catch (error) {
        console.error('Gemini API Error:', error.response?.data || error.message);
        res.status(500).json({ error: 'Internal Server Error' });
    }

});
